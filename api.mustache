/// <reference path="api.d.ts" />
import {Http, Headers, RequestOptions, Response, URLSearchParams} from 'angular2/http';
import {Injectable} from 'angular2/core';
import {Observable} from 'rxjs/Observable';
import * as API from './api';



/* tslint:disable:no-unused-variable member-ordering */


{{#operations}}
  {{#description}}
      /**
      * {{&description}}
      */
  {{/description}}
  @Injectable()
  export class {{classname}} {
  protected basePath = '{{basePath}}';
  public defaultHeaders : Headers = new Headers();

  constructor(protected http: Http) {

  }

  {{#operation}}
      /**
      * {{summary}}
      * {{notes}}
      {{#allParams}}* @param {{paramName}} {{description}}
      {{/allParams}}*/
      public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any ) : Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
      const path = this.basePath + '{{path}}'{{#pathParams}}
          .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};

      let searchParams: URLSearchParams = new URLSearchParams();
      let headerParams = this.defaultHeaders;
      {{#hasFormParams}}
          let formParams: any = {};

      {{/hasFormParams}}
      {{#allParams}}
        {{#required}}
            // verify required parameter '{{paramName}}' is set
            if (!{{paramName}}) {
            throw new Error('Missing required parameter {{paramName}} when calling {{nickname}}');
            }
        {{/required}}
      {{/allParams}}
      {{#queryParams}}
          if ({{paramName}} !== undefined) {
          searchParams.set('{{baseName}}', <string><any>{{paramName}});
              }

      {{/queryParams}}
      {{#headerParams}}
              headerParams.set('{{baseName}}', {{paramName }});

      {{/headerParams}}
      {{#hasFormParams}}
              headerParams.set('Content-Type', 'application/x-www-form-urlencoded');

      {{/hasFormParams}}
      {{#formParams}}
              formParams['{{baseName}}'] = {{paramName}};

      {{/formParams}}
          let requestOptions: RequestOptions = new RequestOptions({
          method: '{{httpMethod}}',
          headers: headerParams,
          search: searchParams
          });
      {{#bodyParam}}
              requestOptions.body = JSON.stringify({{paramName}});
      {{/bodyParam}}

          return this.http.request(path, requestOptions)
          .map((response: Response) => {
          return response.json();
          });
          }
  {{/operation}}
      }
{{/operations}}
